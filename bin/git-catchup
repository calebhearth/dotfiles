#!/bin/sh

# NAME
#        git-catchup - Rebase onto a "mainline" branch.
#
# SYNOPSIS
#        git catchup [<repository> <refspec>]
#        git catchup <refspec>
#
# DESCRIPTION
#        Incorporate upstream mainline changes into the current branch by
#        performing a git-pull(1) --rebase --autostash with the rebase in
#        interactive mode configured to output to STDOUT rather than open a
#        terminal. Logs changes from the merge-base of <respository>/<refspec>
#        and HEAD before and after catching up.
#
#        <repository> should be the name of a remote repository as passed to git-
#        fetch(1). <refspec> can name an arbitrary remote ref (for example, the
#        name of a tag), but usually it is the name of a branch in the remote
#        repository.
#
#        Default value for <repository> is read from the "remote" configuration
#        for the current branch as set by git-branch(1) --track. Default value
#        for <refspec> is "master".

set -e

interactive=false
ARGUMENTS=$(/opt/homebrew/opt/gnu-getopt/bin/getopt -o 'hi' --long 'help,interactive' -- $@)
while true; do
	case "$1" in
		--help | -h)
			grep -B 100000 "set.*" $0 | grep '^#[^!]'
			exit 0
			;;
		--interactive | -i)
			interactive=true
			shift
			;;
		--)
			shift
			break
			;;
		*)
			break
			;;
	esac
done

remote="$1"
parent="$2"

if [ -z "$parent" ]; then
	parent=${remote:="main"}
	if ! git rev-parse --abrev-ref main > /dev/null 2>&1; then
		parent=$(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')
	fi
	remote=$(git config branch.$parent.remote)
	remote=${remote:="origin"}
fi

previous_head_sha=$(git rev-parse HEAD)
merge_base_sha=$(git merge-base "$previous_head_sha" "$remote/$parent")
# Use the last commit on a merged branch if merge-base is a merge
if git rev-parse "$merge_base_sha^2" > /dev/null 2>&1; then
	merge_base_sha=$(git rev-parse "$merge_base_sha^2")
fi

if [ "$interactive" = true ]; then
	git pull --rebase=interactive --autostash "$remote" "$parent"
else
	git -c core.editor="grep --invert-match '^#'" pull --rebase=interactive --autostash "$remote" "$parent"
fi

git log --pretty=update --graph "$merge_base_sha^1"..HEAD "$merge_base_sha^1"^^.."$previous_head_sha"
