#!/usr/bin/env zsh

# Looks for any commits with messages including $disallowedWords and prevents
# pushing if they are found and destination branch is main, master, or does not
# match the remote tracking branch.
#
# Called by "git push" after it has checked the remote status, but before
# anything has been pushed. If this script exits with a non-zero status nothing
# will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>

remote="$1"
url="$2"

z40=0000000000000000000000000000000000000000

disallowedWords="(WIP|fixup|squash)"
remoteTrackingBranch="$(git for-each-ref --format='%(upstream:short)' "$(git symbolic-ref -q HEAD)")"
remoteTrackingBranch="${remoteTrackingBranch##$remote/}"

IFS=' '
while read local_ref local_sha remote_ref remote_sha
do
  remoteBranch="${remote_ref##refs/heads/}"
  if [ "$remoteTrackingBranch" = "$remoteBranch" ] \
    || [ "$remoteBranch" = "main" ] \
    || [ "$remoteBranch" = "master" ] \
    || [ "$remoteBranch" = "develop" ]; then

  if [ "$local_sha" != $z40 ]; then
    if [ "$remote_sha" = $z40 ]
    then
      # New branch, examine all commits
      range="main..$local_sha"
    else
      # Update to existing branch, examine new commits
      range="$remote_sha..$local_sha"
    fi


    if !git log --grep="\b$disallowedWords\b" --perl-regexp --regexp-ignore-case --exit-code $range; then
      echo "Found WIP commit in $local_ref, not pushing"
      exit 1
    fi
  fi
  fi
done
