" ----------------------------------------------------------------------------
" Trailing Whitespace
" ----------------------------------------------------------------------------

" from http://vim.wikia.com/wiki/Remove_unwanted_spaces
function TrimWhiteSpace()
  %s/\s*$//
  ''
:endfunction

" expand existing tabs
function TabToSpaces()
  retab
:endfunction

set list listchars=trail:.,extends:>
autocmd FileWritePre * :call TrimWhiteSpace()
autocmd FileAppendPre * :call TrimWhiteSpace()
autocmd FilterWritePre * :call TrimWhiteSpace()
autocmd BufWritePre * :call TrimWhiteSpace()
autocmd FileWritePre * :call TabToSpaces()
autocmd FileAppendPre * :call TabToSpaces()
autocmd FilterWritePre * :call TabToSpaces()
autocmd BufWritePre * :call TabToSpaces()

map <F2> :call TrimWhiteSpace()<CR>
map! <F2> :call TrimWhiteSpace()<CR>

" ----------------------------------------------------------------------------
" Filetype overrides
" ----------------------------------------------------------------------------

autocmd FileType gitcommit source ~/.vim/gitcommit.vim
autocmd Filetype gitcommit setlocal spell

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Test-running stuff
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""function! RunCurrentTest()
"""  let in_test_file = match(expand("%"), '\(.feature\|_spec.rb\|_test.rb\)$') != -1
"""  if in_test_file
"""    call SetTestFile()
"""
"""    if match(expand('%'), '\.feature$') != -1
"""      call SetTestRunner("!bundle exec cucumber")
"""      exec g:bjo_test_runner g:bjo_test_file
"""    elseif match(expand('%'), '_spec\.rb$') != -1
"""      call SetTestRunner("!bundle exec rspec")
"""      exec g:bjo_test_runner g:bjo_test_file
"""    else
"""      call SetTestRunner("!bundle exec ruby -Itest")
"""      exec g:bjo_test_runner g:bjo_test_file
"""    endif
"""  else
"""    exec g:bjo_test_runner g:bjo_test_file
"""  endif
"""endfunction
"""
"""function! SetTestRunner(runner)
"""  let g:bjo_test_runner=a:runner
"""endfunction
"""
"""function! RunCurrentLineInTest()
"""  let in_test_file = match(expand("%"), '\(.feature\|_spec.rb\|_test.rb\)$') != -1
"""  if in_test_file
"""    call SetTestFileWithLine()
"""  end
"""
"""  exec "!bundle exec rspec --format documentation" g:bjo_test_file . ":" . g:bjo_test_file_line
"""endfunction
"""
"""function! SetTestFile()
"""  let g:bjo_test_file=@%
"""endfunction
"""
"""function! SetTestFileWithLine()
"""  let g:bjo_test_file=@%
"""  let g:bjo_test_file_line=line(".")
"""endfunction
"""
"""map <Leader>t :call RunCurrentTest()<CR>
"""map <Leader>o :call RunCurrentLineInTest()<CR>
function! RunCurrentTest()
  exec "Dispatch rspec " . @%
endfunction

function! RunCurrentLineInTest()
  exec "Dispatch rspec " . @% . ':' . line(".")
endfunction

map <Leader>t :call RunCurrentTest()<CR>
map <Leader>o :call RunCurrentLineInTest()<CR>

" experimental tabbar

hi TabLineFill term=bold cterm=bold ctermbg=236
hi TabLine term=bold cterm=bold ctermbg=240 ctermfg=231
hi TabLineSel term=bold cterm=bold ctermbg=148 ctermfg=22

function MyTabLine()
  let s = ''
  for i in range(tabpagenr('$'))
    " select the highlighting
    if i + 1 == tabpagenr()
      let s .= '%#TabLineSel#'
    else
      let s .= '%#TabLine#'
    endif

    " set the tab page number (for mouse clicks)
    let s .= '%' . (i + 1) . 'T'

    " the label is made by MyTabLabel()
    let s .= ' %{MyTabLabel(' . (i + 1) . ')} '
  endfor

  " after the last tab fill with TabLineFill and reset tab page nr
  let s .= '%#TabLineFill#%T'

  " right-align the label to close the current tab page
  if tabpagenr('$') > 1
    let s .= '%=%#TabLine#%999X'
  endif

  return s
endfunction

function MyTabLabel(n)
  let buflist = tabpagebuflist(a:n)
  let winnr = tabpagewinnr(a:n)
  return fnamemodify(bufname(buflist[winnr - 1]), ":t")
endfunction

set tabline=%!MyTabLine()
set showtabline=1

set exrc
