autocmd filetype crontab set nobackup nowritebackup
autocmd filetype bash setlocal noexpandtab
autocmd filetype sh setlocal noexpandtab
autocmd filetype zsh setlocal noexpandtab
autocmd filetype dockerfile setlocal noexpandtab

aug QFClose
  au!
  au WinEnter * if winnr('$') == 1 && getbufvar(winbufnr(winnr()), "&buftype") == "quickfix"|q|endif
aug END

let g:go_fmt_command = "goimports"
autocmd FileType go compiler go
autocmd FileType go nnoremap <Leader>t :Dispatch go test ./...<CR>
autocmd FileType go,zsh,bash,sh setlocal listchars=tab:\ \ ,trail:Â·,extends:> " Highlight problematic whitespace

" autocmd BufWritePre * :silent call Whitewash()
" autocmd FileAppendPre * :silent call Whitewash()
" autocmd FileWritePre * :silent call Whitewash()
" autocmd FilterWritePre * :silent call Whitewash()

let s:usestate = 0

let g:dbext_default_profile_PG = 'type=PGSQL:user=caleb'

function! Psqlc() range
  Dispatch echo .shellescape(join(getline(31, 33), "\n")) | psql
endfunction

autocmd filetype markdown nnoremap <Leader>e :normal mm"wya]}h2] 2j"wpa: <https://example.com><Esc>vi>p`m

autocmd filetype markdown,gitcommit setlocal keywordprg=:Dispatch\ dict
autocmd filetype ruby setlocal keywordprg=:Dispatch\ ri
autocmd filetype sql setlocal keywordprg=:DB\ mysql://root:@localhost\ -e\ \\\h
autocmd FileType go,godoc setlocal keywordprg=:GoDoc


autocmd filetype markdown nnoremap ? :w !wc<CR>
autocmd filetype markdown vnoremap ? :'<,'>w !wc<CR>

" https://thoughtbot.com/blog/modern-typescript-and-react-development-in-vim
autocmd BufEnter *.{js,jsx,ts,tsx} :syntax sync fromstart
autocmd BufLeave *.{js,jsx,ts,tsx} :syntax sync clear

set colorcolumn=81,101,121
highlight TreesitterContext ctermbg=black cterm=underline guibg=black gui=underline

lua << LUA
  require'nvim-treesitter.configs'.setup {

    ensure_installed = {
      'bash',
      'css',
      'diff',
      'dockerfile',
      'dot',
      'git_config',
      'git_rebase',
      'gitattributes',
      'gitcommit',
      'gitignore',
      'html',
      'javascript',
      'jq',
      'json',
      'lua',
      'python',
      'ruby',
      'sql',
      'ssh_config',
      'swift',
      'tmux',
      'typescript',
      'vim',
      'vimdoc',
      'yaml',
    }
  }

  require'treesitter-context'.setup{
  enable = true,
  max_lines=3,
  trim_scope = 'outer',
  patterns = {
    default = {
      'class',
      'module',
      'function',
      'method',
      'for',
      'while',
      'if',
      'switch',
      'case',
      },
    },
  }
  require'lspconfig'.rubocop.setup{}

  require'lspconfig'.ruby_lsp.setup {
    semanticHighlighting = false,
    ---@param client lsp.Client
    on_init = function(client)
      client.server_capabilities.semanticTokensProvider = nil  -- turn off semantic tokens
    end,
  }

  local swift_lsp = vim.api.nvim_create_augroup("swift_lsp", { clear = true })
  vim.api.nvim_create_autocmd("FileType", {
    pattern = { "swift" },
    callback = function()
      local root_dir = vim.fs.dirname(vim.fs.find({
        "Package.swift",
        ".git",
      }, { upward = true })[1])
      local client = vim.lsp.start({
        name = "sourcekit-lsp",
        cmd = { "sourcekit-lsp" },
        root_dir = root_dir,
      })
      vim.lsp.buf_attach_client(0, client)
    end,
    group = swift_lsp,
  })
LUA

autocmd FileType ruby :ALEDisable
autocmd BufWritePre *.rb :lua vim.lsp.buf.format { async = false }
autocmd FileWritePre *.rb :lua vim.lsp.buf.format { async = false }
